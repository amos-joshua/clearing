// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'features/call/model/call.dart';
import 'features/contacts/model/contact.dart';
import 'features/contacts/model/group.dart';
import 'features/presets/model/preset.dart';
import 'features/presets/model/schedule.dart';
import 'features/settings/model/app_settings.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 3892052106173536947),
    name: 'Contact',
    lastPropertyId: const obx_int.IdUid(9, 4500667855194324155),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 7961606599457295103),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 2627754300394845952),
        name: 'uid',
        type: 9,
        flags: 2048,
        indexId: const obx_int.IdUid(1, 2427729664969677329),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3203661083044307880),
        name: 'firstName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 4659957836922783572),
        name: 'lastName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 190363080733266697),
        name: 'displayName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 4153542639457571604),
        name: 'emails',
        type: 30,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 1352522786434052549),
        name: 'phoneNumbers',
        type: 30,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 3070879022285155411),
        name: 'lastUpdated',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 4500667855194324155),
        name: 'groupId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(2, 5316062410405308877),
        relationTarget: 'ContactGroup',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 3469322468985148471),
    name: 'ContactGroup',
    lastPropertyId: const obx_int.IdUid(3, 5079346156225298559),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 2034485457177237581),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 8543852125731923909),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5079346156225298559),
        name: 'catchAll',
        type: 1,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[
      obx_int.ModelBacklink(
        name: 'contacts',
        srcEntity: 'Contact',
        srcField: 'group',
      ),
    ],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 3925257056964934016),
    name: 'Preset',
    lastPropertyId: const obx_int.IdUid(3, 7737440185057863258),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 3347725773814204139),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 7991501341929634305),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 7737440185057863258),
        name: 'isDefault',
        type: 1,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[
      obx_int.ModelBacklink(
        name: 'settings',
        srcEntity: 'PresetSetting',
        srcField: 'preset',
      ),
      obx_int.ModelBacklink(
        name: 'schedules',
        srcEntity: 'Schedule',
        srcField: 'preset',
      ),
    ],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(4, 2261321867902119823),
    name: 'PresetSetting',
    lastPropertyId: const obx_int.IdUid(7, 28614185218818935),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4237014019633799214),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 8701250832957039560),
        name: 'groupId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(3, 2644821823675017259),
        relationTarget: 'ContactGroup',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 2495611314503689807),
        name: 'presetId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(4, 808358128802825958),
        relationTarget: 'Preset',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 6103124582523022011),
        name: 'dbLeisureRingType',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 6815708293881866200),
        name: 'dbImportantRingType',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 8264465565140226581),
        name: 'dbUrgentRingType',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 28614185218818935),
        name: 'ringTypeIndex',
        type: 6,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(5, 7921712410731771832),
    name: 'Schedule',
    lastPropertyId: const obx_int.IdUid(5, 7723097915840084566),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8444168853615988743),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 3498585892326937165),
        name: 'days',
        type: 27,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 6983693153393335859),
        name: 'presetId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(5, 6260179888999286267),
        relationTarget: 'Preset',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 1822098296432654604),
        name: 'dbStartTime',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 7723097915840084566),
        name: 'dbEndTime',
        type: 6,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(6, 4885048815211993063),
    name: 'AppSettings',
    lastPropertyId: const obx_int.IdUid(10, 2356861124618301028),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 2467944553729303352),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 2904682793049305976),
        name: 'hasNotificationPolicyAccessPermissions',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 2606833962615726379),
        name: 'hasReceivePushNotificationsPermissions',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 2811621849439391520),
        name: 'performedFirstTimeInit',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 7726516246894931705),
        name: 'currentSchemaVersion',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 442827520805167201),
        name: 'presetOverrideId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(6, 6764219337244872473),
        relationTarget: 'Preset',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 3348292250521668444),
        name: 'dbPresetOverrideStart',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 1957551638564060099),
        name: 'dbPresetOverrideEnd',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 3581366937906475496),
        name: 'isDeveloper',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 2356861124618301028),
        name: 'disableWebRTC',
        type: 1,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(7, 2096184488857740476),
    name: 'Call',
    lastPropertyId: const obx_int.IdUid(19, 9079258450306877994),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 1105627314263756124),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3877614837965994600),
        name: 'outgoing',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 7288647638307742751),
        name: 'subject',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 4519789293177444497),
        name: 'startTime',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 6265910151114160941),
        name: 'endTime',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 8140065542491469326),
        name: 'dbUrgency',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 8004556550347134573),
        name: 'callUuid',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 2370978574062590214),
        name: 'contactEmails',
        type: 30,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 7247456555135692073),
        name: 'sdpOffer',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 5540964399615816787),
        name: 'sdpAnswer',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 4198289173106758836),
        name: 'webRTCPeerConnectionState',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(15, 8219198147543417172),
        name: 'webRTCIceConnectionState',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(16, 6661580353996132844),
        name: 'webRTCIceGatheringState',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(17, 9156284121213935138),
        name: 'webRTCSignalingState',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(18, 8736472327381492808),
        name: 'state',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(19, 9079258450306877994),
        name: 'contactId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(8, 1327692473304755596),
        relationTarget: 'Contact',
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(1, 2478490554441955834),
        name: 'logEntries',
        targetId: const obx_int.IdUid(8, 5514264026573602949),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(8, 5514264026573602949),
    name: 'LogEntry',
    lastPropertyId: const obx_int.IdUid(4, 6408183805405538382),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4225961825031044091),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 8337752477825845633),
        name: 'timestamp',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 4807552741376339133),
        name: 'eventType',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 6408183805405538382),
        name: 'message',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(8, 5514264026573602949),
    lastIndexId: const obx_int.IdUid(8, 1327692473304755596),
    lastRelationId: const obx_int.IdUid(1, 2478490554441955834),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [2743340243300988469],
    retiredPropertyUids: const [
      1281735872941996336,
      5028019888053322518,
      7111780706480154241,
    ],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    Contact: obx_int.EntityDefinition<Contact>(
      model: _entities[0],
      toOneRelations: (Contact object) => [object.group],
      toManyRelations: (Contact object) => {},
      getId: (Contact object) => object.id,
      setId: (Contact object, int id) {
        object.id = id;
      },
      objectToFB: (Contact object, fb.Builder fbb) {
        final uidOffset = fbb.writeString(object.uid);
        final firstNameOffset = fbb.writeString(object.firstName);
        final lastNameOffset = fbb.writeString(object.lastName);
        final displayNameOffset = fbb.writeString(object.displayName);
        final emailsOffset = fbb.writeList(
          object.emails.map(fbb.writeString).toList(growable: false),
        );
        final phoneNumbersOffset = fbb.writeList(
          object.phoneNumbers.map(fbb.writeString).toList(growable: false),
        );
        fbb.startTable(10);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, uidOffset);
        fbb.addOffset(2, firstNameOffset);
        fbb.addOffset(3, lastNameOffset);
        fbb.addOffset(4, displayNameOffset);
        fbb.addOffset(5, emailsOffset);
        fbb.addOffset(6, phoneNumbersOffset);
        fbb.addInt64(7, object.lastUpdated.millisecondsSinceEpoch);
        fbb.addInt64(8, object.group.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final uidParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final displayNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final firstNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final lastNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final phoneNumbersParam = const fb.ListReader<String>(
          fb.StringReader(asciiOptimization: true),
          lazy: false,
        ).vTableGet(buffer, rootOffset, 16, []);
        final emailsParam = const fb.ListReader<String>(
          fb.StringReader(asciiOptimization: true),
          lazy: false,
        ).vTableGet(buffer, rootOffset, 14, []);
        final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0),
        );
        final object = Contact(
          id: idParam,
          uid: uidParam,
          displayName: displayNameParam,
          firstName: firstNameParam,
          lastName: lastNameParam,
          phoneNumbers: phoneNumbersParam,
          emails: emailsParam,
          lastUpdated: lastUpdatedParam,
        );
        object.group.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          20,
          0,
        );
        object.group.attach(store);
        return object;
      },
    ),
    ContactGroup: obx_int.EntityDefinition<ContactGroup>(
      model: _entities[1],
      toOneRelations: (ContactGroup object) => [],
      toManyRelations: (ContactGroup object) => {
        obx_int.RelInfo<Contact>.toOneBacklink(
          9,
          object.id,
          (Contact srcObject) => srcObject.group,
        ): object.contacts,
      },
      getId: (ContactGroup object) => object.id,
      setId: (ContactGroup object, int id) {
        object.id = id;
      },
      objectToFB: (ContactGroup object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        fbb.startTable(4);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addBool(2, object.catchAll);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final catchAllParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          8,
          false,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final object = ContactGroup(
          id: idParam,
          catchAll: catchAllParam,
          name: nameParam,
        );
        obx_int.InternalToManyAccess.setRelInfo<ContactGroup>(
          object.contacts,
          store,
          obx_int.RelInfo<Contact>.toOneBacklink(
            9,
            object.id,
            (Contact srcObject) => srcObject.group,
          ),
        );
        return object;
      },
    ),
    Preset: obx_int.EntityDefinition<Preset>(
      model: _entities[2],
      toOneRelations: (Preset object) => [],
      toManyRelations: (Preset object) => {
        obx_int.RelInfo<PresetSetting>.toOneBacklink(
          3,
          object.id,
          (PresetSetting srcObject) => srcObject.preset,
        ): object.settings,
        obx_int.RelInfo<Schedule>.toOneBacklink(
          3,
          object.id,
          (Schedule srcObject) => srcObject.preset,
        ): object.schedules,
      },
      getId: (Preset object) => object.id,
      setId: (Preset object, int id) {
        object.id = id;
      },
      objectToFB: (Preset object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        fbb.startTable(4);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addBool(2, object.isDefault);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final isDefaultParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          8,
          false,
        );
        final object = Preset(
          id: idParam,
          name: nameParam,
          isDefault: isDefaultParam,
        );
        obx_int.InternalToManyAccess.setRelInfo<Preset>(
          object.settings,
          store,
          obx_int.RelInfo<PresetSetting>.toOneBacklink(
            3,
            object.id,
            (PresetSetting srcObject) => srcObject.preset,
          ),
        );
        obx_int.InternalToManyAccess.setRelInfo<Preset>(
          object.schedules,
          store,
          obx_int.RelInfo<Schedule>.toOneBacklink(
            3,
            object.id,
            (Schedule srcObject) => srcObject.preset,
          ),
        );
        return object;
      },
    ),
    PresetSetting: obx_int.EntityDefinition<PresetSetting>(
      model: _entities[3],
      toOneRelations: (PresetSetting object) => [object.group, object.preset],
      toManyRelations: (PresetSetting object) => {},
      getId: (PresetSetting object) => object.id,
      setId: (PresetSetting object, int id) {
        object.id = id;
      },
      objectToFB: (PresetSetting object, fb.Builder fbb) {
        fbb.startTable(8);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.group.targetId);
        fbb.addInt64(2, object.preset.targetId);
        fbb.addInt64(3, object.dbLeisureRingType);
        fbb.addInt64(4, object.dbImportantRingType);
        fbb.addInt64(5, object.dbUrgentRingType);
        fbb.addInt64(6, object.ringTypeIndex);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final object = PresetSetting(id: idParam)
          ..dbLeisureRingType = const fb.Int64Reader().vTableGet(
            buffer,
            rootOffset,
            10,
            0,
          )
          ..dbImportantRingType = const fb.Int64Reader().vTableGet(
            buffer,
            rootOffset,
            12,
            0,
          )
          ..dbUrgentRingType = const fb.Int64Reader().vTableGet(
            buffer,
            rootOffset,
            14,
            0,
          )
          ..ringTypeIndex = const fb.Int64Reader().vTableGet(
            buffer,
            rootOffset,
            16,
            0,
          );
        object.group.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        object.group.attach(store);
        object.preset.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        object.preset.attach(store);
        return object;
      },
    ),
    Schedule: obx_int.EntityDefinition<Schedule>(
      model: _entities[4],
      toOneRelations: (Schedule object) => [object.preset],
      toManyRelations: (Schedule object) => {},
      getId: (Schedule object) => object.id,
      setId: (Schedule object, int id) {
        object.id = id;
      },
      objectToFB: (Schedule object, fb.Builder fbb) {
        final daysOffset = fbb.writeListInt64(object.days);
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, daysOffset);
        fbb.addInt64(2, object.preset.targetId);
        fbb.addInt64(3, object.dbStartTime);
        fbb.addInt64(4, object.dbEndTime);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final daysParam = const fb.ListReader<int>(
          fb.Int64Reader(),
          lazy: false,
        ).vTableGet(buffer, rootOffset, 6, []);
        final object = Schedule(id: idParam, days: daysParam)
          ..dbStartTime = const fb.Int64Reader().vTableGet(
            buffer,
            rootOffset,
            10,
            0,
          )
          ..dbEndTime = const fb.Int64Reader().vTableGet(
            buffer,
            rootOffset,
            12,
            0,
          );
        object.preset.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        object.preset.attach(store);
        return object;
      },
    ),
    AppSettings: obx_int.EntityDefinition<AppSettings>(
      model: _entities[5],
      toOneRelations: (AppSettings object) => [object.presetOverride],
      toManyRelations: (AppSettings object) => {},
      getId: (AppSettings object) => object.id,
      setId: (AppSettings object, int id) {
        object.id = id;
      },
      objectToFB: (AppSettings object, fb.Builder fbb) {
        final currentSchemaVersionOffset = fbb.writeString(
          object.currentSchemaVersion,
        );
        fbb.startTable(11);
        fbb.addInt64(0, object.id);
        fbb.addBool(1, object.hasNotificationPolicyAccessPermissions);
        fbb.addBool(2, object.hasReceivePushNotificationsPermissions);
        fbb.addBool(3, object.performedFirstTimeInit);
        fbb.addOffset(4, currentSchemaVersionOffset);
        fbb.addInt64(5, object.presetOverride.targetId);
        fbb.addInt64(6, object.dbPresetOverrideStart);
        fbb.addInt64(7, object.dbPresetOverrideEnd);
        fbb.addBool(8, object.isDeveloper);
        fbb.addBool(9, object.disableWebRTC);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final hasNotificationPolicyAccessPermissionsParam =
            const fb.BoolReader().vTableGet(buffer, rootOffset, 6, false);
        final hasReceivePushNotificationsPermissionsParam =
            const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false);
        final performedFirstTimeInitParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          10,
          false,
        );
        final currentSchemaVersionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final isDeveloperParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          20,
          false,
        );
        final disableWebRTCParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          22,
          false,
        );
        final object =
            AppSettings(
                id: idParam,
                hasNotificationPolicyAccessPermissions:
                    hasNotificationPolicyAccessPermissionsParam,
                hasReceivePushNotificationsPermissions:
                    hasReceivePushNotificationsPermissionsParam,
                performedFirstTimeInit: performedFirstTimeInitParam,
                currentSchemaVersion: currentSchemaVersionParam,
                isDeveloper: isDeveloperParam,
                disableWebRTC: disableWebRTCParam,
              )
              ..dbPresetOverrideStart = const fb.Int64Reader().vTableGet(
                buffer,
                rootOffset,
                16,
                0,
              )
              ..dbPresetOverrideEnd = const fb.Int64Reader().vTableGet(
                buffer,
                rootOffset,
                18,
                0,
              );
        object.presetOverride.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          14,
          0,
        );
        object.presetOverride.attach(store);
        return object;
      },
    ),
    Call: obx_int.EntityDefinition<Call>(
      model: _entities[6],
      toOneRelations: (Call object) => [object.contact],
      toManyRelations: (Call object) => {
        obx_int.RelInfo<Call>.toMany(1, object.id): object.logEntries,
      },
      getId: (Call object) => object.id,
      setId: (Call object, int id) {
        object.id = id;
      },
      objectToFB: (Call object, fb.Builder fbb) {
        final subjectOffset = fbb.writeString(object.subject);
        final callUuidOffset = fbb.writeString(object.callUuid);
        final contactEmailsOffset = fbb.writeList(
          object.contactEmails.map(fbb.writeString).toList(growable: false),
        );
        final sdpOfferOffset = fbb.writeString(object.sdpOffer);
        final sdpAnswerOffset = fbb.writeString(object.sdpAnswer);
        final webRTCPeerConnectionStateOffset = fbb.writeString(
          object.webRTCPeerConnectionState,
        );
        final webRTCIceConnectionStateOffset = fbb.writeString(
          object.webRTCIceConnectionState,
        );
        final webRTCIceGatheringStateOffset = fbb.writeString(
          object.webRTCIceGatheringState,
        );
        final webRTCSignalingStateOffset = fbb.writeString(
          object.webRTCSignalingState,
        );
        final stateOffset = fbb.writeString(object.state);
        fbb.startTable(20);
        fbb.addInt64(0, object.id);
        fbb.addBool(2, object.outgoing);
        fbb.addOffset(3, subjectOffset);
        fbb.addInt64(4, object.startTime.millisecondsSinceEpoch);
        fbb.addInt64(5, object.endTime?.millisecondsSinceEpoch);
        fbb.addInt64(7, object.dbUrgency);
        fbb.addOffset(8, callUuidOffset);
        fbb.addOffset(9, contactEmailsOffset);
        fbb.addOffset(11, sdpOfferOffset);
        fbb.addOffset(12, sdpAnswerOffset);
        fbb.addOffset(13, webRTCPeerConnectionStateOffset);
        fbb.addOffset(14, webRTCIceConnectionStateOffset);
        fbb.addOffset(15, webRTCIceGatheringStateOffset);
        fbb.addOffset(16, webRTCSignalingStateOffset);
        fbb.addOffset(17, stateOffset);
        fbb.addInt64(18, object.contact.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final endTimeValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          14,
        );
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final callUuidParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 20, '');
        final stateParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 38, '');
        final outgoingParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          8,
          false,
        );
        final contactEmailsParam = const fb.ListReader<String>(
          fb.StringReader(asciiOptimization: true),
          lazy: false,
        ).vTableGet(buffer, rootOffset, 22, []);
        final subjectParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final startTimeParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
        );
        final endTimeParam = endTimeValue == null
            ? null
            : DateTime.fromMillisecondsSinceEpoch(endTimeValue);
        final sdpOfferParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 26, '');
        final sdpAnswerParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 28, '');
        final webRTCPeerConnectionStateParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 30, '');
        final webRTCIceConnectionStateParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 32, '');
        final webRTCIceGatheringStateParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 34, '');
        final webRTCSignalingStateParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 36, '');
        final object =
            Call(
                id: idParam,
                callUuid: callUuidParam,
                state: stateParam,
                outgoing: outgoingParam,
                contactEmails: contactEmailsParam,
                subject: subjectParam,
                startTime: startTimeParam,
                endTime: endTimeParam,
                sdpOffer: sdpOfferParam,
                sdpAnswer: sdpAnswerParam,
                webRTCPeerConnectionState: webRTCPeerConnectionStateParam,
                webRTCIceConnectionState: webRTCIceConnectionStateParam,
                webRTCIceGatheringState: webRTCIceGatheringStateParam,
                webRTCSignalingState: webRTCSignalingStateParam,
              )
              ..dbUrgency = const fb.Int64Reader().vTableGet(
                buffer,
                rootOffset,
                18,
                0,
              );
        object.contact.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          40,
          0,
        );
        object.contact.attach(store);
        obx_int.InternalToManyAccess.setRelInfo<Call>(
          object.logEntries,
          store,
          obx_int.RelInfo<Call>.toMany(1, object.id),
        );
        return object;
      },
    ),
    LogEntry: obx_int.EntityDefinition<LogEntry>(
      model: _entities[7],
      toOneRelations: (LogEntry object) => [],
      toManyRelations: (LogEntry object) => {},
      getId: (LogEntry object) => object.id,
      setId: (LogEntry object, int id) {
        object.id = id;
      },
      objectToFB: (LogEntry object, fb.Builder fbb) {
        final timestampOffset = fbb.writeString(object.timestamp);
        final eventTypeOffset = fbb.writeString(object.eventType);
        final messageOffset = fbb.writeString(object.message);
        fbb.startTable(5);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, timestampOffset);
        fbb.addOffset(2, eventTypeOffset);
        fbb.addOffset(3, messageOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final timestampParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final eventTypeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final messageParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final object = LogEntry(
          id: idParam,
          timestamp: timestampParam,
          eventType: eventTypeParam,
          message: messageParam,
        );

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Contact] entity fields to define ObjectBox queries.
class Contact_ {
  /// See [Contact.id].
  static final id = obx.QueryIntegerProperty<Contact>(
    _entities[0].properties[0],
  );

  /// See [Contact.uid].
  static final uid = obx.QueryStringProperty<Contact>(
    _entities[0].properties[1],
  );

  /// See [Contact.firstName].
  static final firstName = obx.QueryStringProperty<Contact>(
    _entities[0].properties[2],
  );

  /// See [Contact.lastName].
  static final lastName = obx.QueryStringProperty<Contact>(
    _entities[0].properties[3],
  );

  /// See [Contact.displayName].
  static final displayName = obx.QueryStringProperty<Contact>(
    _entities[0].properties[4],
  );

  /// See [Contact.emails].
  static final emails = obx.QueryStringVectorProperty<Contact>(
    _entities[0].properties[5],
  );

  /// See [Contact.phoneNumbers].
  static final phoneNumbers = obx.QueryStringVectorProperty<Contact>(
    _entities[0].properties[6],
  );

  /// See [Contact.lastUpdated].
  static final lastUpdated = obx.QueryDateProperty<Contact>(
    _entities[0].properties[7],
  );

  /// See [Contact.group].
  static final group = obx.QueryRelationToOne<Contact, ContactGroup>(
    _entities[0].properties[8],
  );
}

/// [ContactGroup] entity fields to define ObjectBox queries.
class ContactGroup_ {
  /// See [ContactGroup.id].
  static final id = obx.QueryIntegerProperty<ContactGroup>(
    _entities[1].properties[0],
  );

  /// See [ContactGroup.name].
  static final name = obx.QueryStringProperty<ContactGroup>(
    _entities[1].properties[1],
  );

  /// See [ContactGroup.catchAll].
  static final catchAll = obx.QueryBooleanProperty<ContactGroup>(
    _entities[1].properties[2],
  );

  /// see [ContactGroup.contacts]
  static final contacts = obx.QueryBacklinkToMany<Contact, ContactGroup>(
    Contact_.group,
  );
}

/// [Preset] entity fields to define ObjectBox queries.
class Preset_ {
  /// See [Preset.id].
  static final id = obx.QueryIntegerProperty<Preset>(
    _entities[2].properties[0],
  );

  /// See [Preset.name].
  static final name = obx.QueryStringProperty<Preset>(
    _entities[2].properties[1],
  );

  /// See [Preset.isDefault].
  static final isDefault = obx.QueryBooleanProperty<Preset>(
    _entities[2].properties[2],
  );

  /// see [Preset.settings]
  static final settings = obx.QueryBacklinkToMany<PresetSetting, Preset>(
    PresetSetting_.preset,
  );

  /// see [Preset.schedules]
  static final schedules = obx.QueryBacklinkToMany<Schedule, Preset>(
    Schedule_.preset,
  );
}

/// [PresetSetting] entity fields to define ObjectBox queries.
class PresetSetting_ {
  /// See [PresetSetting.id].
  static final id = obx.QueryIntegerProperty<PresetSetting>(
    _entities[3].properties[0],
  );

  /// See [PresetSetting.group].
  static final group = obx.QueryRelationToOne<PresetSetting, ContactGroup>(
    _entities[3].properties[1],
  );

  /// See [PresetSetting.preset].
  static final preset = obx.QueryRelationToOne<PresetSetting, Preset>(
    _entities[3].properties[2],
  );

  /// See [PresetSetting.dbLeisureRingType].
  static final dbLeisureRingType = obx.QueryIntegerProperty<PresetSetting>(
    _entities[3].properties[3],
  );

  /// See [PresetSetting.dbImportantRingType].
  static final dbImportantRingType = obx.QueryIntegerProperty<PresetSetting>(
    _entities[3].properties[4],
  );

  /// See [PresetSetting.dbUrgentRingType].
  static final dbUrgentRingType = obx.QueryIntegerProperty<PresetSetting>(
    _entities[3].properties[5],
  );

  /// See [PresetSetting.ringTypeIndex].
  static final ringTypeIndex = obx.QueryIntegerProperty<PresetSetting>(
    _entities[3].properties[6],
  );
}

/// [Schedule] entity fields to define ObjectBox queries.
class Schedule_ {
  /// See [Schedule.id].
  static final id = obx.QueryIntegerProperty<Schedule>(
    _entities[4].properties[0],
  );

  /// See [Schedule.days].
  static final days = obx.QueryIntegerVectorProperty<Schedule>(
    _entities[4].properties[1],
  );

  /// See [Schedule.preset].
  static final preset = obx.QueryRelationToOne<Schedule, Preset>(
    _entities[4].properties[2],
  );

  /// See [Schedule.dbStartTime].
  static final dbStartTime = obx.QueryIntegerProperty<Schedule>(
    _entities[4].properties[3],
  );

  /// See [Schedule.dbEndTime].
  static final dbEndTime = obx.QueryIntegerProperty<Schedule>(
    _entities[4].properties[4],
  );
}

/// [AppSettings] entity fields to define ObjectBox queries.
class AppSettings_ {
  /// See [AppSettings.id].
  static final id = obx.QueryIntegerProperty<AppSettings>(
    _entities[5].properties[0],
  );

  /// See [AppSettings.hasNotificationPolicyAccessPermissions].
  static final hasNotificationPolicyAccessPermissions =
      obx.QueryBooleanProperty<AppSettings>(_entities[5].properties[1]);

  /// See [AppSettings.hasReceivePushNotificationsPermissions].
  static final hasReceivePushNotificationsPermissions =
      obx.QueryBooleanProperty<AppSettings>(_entities[5].properties[2]);

  /// See [AppSettings.performedFirstTimeInit].
  static final performedFirstTimeInit = obx.QueryBooleanProperty<AppSettings>(
    _entities[5].properties[3],
  );

  /// See [AppSettings.currentSchemaVersion].
  static final currentSchemaVersion = obx.QueryStringProperty<AppSettings>(
    _entities[5].properties[4],
  );

  /// See [AppSettings.presetOverride].
  static final presetOverride = obx.QueryRelationToOne<AppSettings, Preset>(
    _entities[5].properties[5],
  );

  /// See [AppSettings.dbPresetOverrideStart].
  static final dbPresetOverrideStart = obx.QueryIntegerProperty<AppSettings>(
    _entities[5].properties[6],
  );

  /// See [AppSettings.dbPresetOverrideEnd].
  static final dbPresetOverrideEnd = obx.QueryIntegerProperty<AppSettings>(
    _entities[5].properties[7],
  );

  /// See [AppSettings.isDeveloper].
  static final isDeveloper = obx.QueryBooleanProperty<AppSettings>(
    _entities[5].properties[8],
  );

  /// See [AppSettings.disableWebRTC].
  static final disableWebRTC = obx.QueryBooleanProperty<AppSettings>(
    _entities[5].properties[9],
  );
}

/// [Call] entity fields to define ObjectBox queries.
class Call_ {
  /// See [Call.id].
  static final id = obx.QueryIntegerProperty<Call>(_entities[6].properties[0]);

  /// See [Call.outgoing].
  static final outgoing = obx.QueryBooleanProperty<Call>(
    _entities[6].properties[1],
  );

  /// See [Call.subject].
  static final subject = obx.QueryStringProperty<Call>(
    _entities[6].properties[2],
  );

  /// See [Call.startTime].
  static final startTime = obx.QueryDateProperty<Call>(
    _entities[6].properties[3],
  );

  /// See [Call.endTime].
  static final endTime = obx.QueryDateProperty<Call>(
    _entities[6].properties[4],
  );

  /// See [Call.dbUrgency].
  static final dbUrgency = obx.QueryIntegerProperty<Call>(
    _entities[6].properties[5],
  );

  /// See [Call.callUuid].
  static final callUuid = obx.QueryStringProperty<Call>(
    _entities[6].properties[6],
  );

  /// See [Call.contactEmails].
  static final contactEmails = obx.QueryStringVectorProperty<Call>(
    _entities[6].properties[7],
  );

  /// See [Call.sdpOffer].
  static final sdpOffer = obx.QueryStringProperty<Call>(
    _entities[6].properties[8],
  );

  /// See [Call.sdpAnswer].
  static final sdpAnswer = obx.QueryStringProperty<Call>(
    _entities[6].properties[9],
  );

  /// See [Call.webRTCPeerConnectionState].
  static final webRTCPeerConnectionState = obx.QueryStringProperty<Call>(
    _entities[6].properties[10],
  );

  /// See [Call.webRTCIceConnectionState].
  static final webRTCIceConnectionState = obx.QueryStringProperty<Call>(
    _entities[6].properties[11],
  );

  /// See [Call.webRTCIceGatheringState].
  static final webRTCIceGatheringState = obx.QueryStringProperty<Call>(
    _entities[6].properties[12],
  );

  /// See [Call.webRTCSignalingState].
  static final webRTCSignalingState = obx.QueryStringProperty<Call>(
    _entities[6].properties[13],
  );

  /// See [Call.state].
  static final state = obx.QueryStringProperty<Call>(
    _entities[6].properties[14],
  );

  /// See [Call.contact].
  static final contact = obx.QueryRelationToOne<Call, Contact>(
    _entities[6].properties[15],
  );

  /// see [Call.logEntries]
  static final logEntries = obx.QueryRelationToMany<Call, LogEntry>(
    _entities[6].relations[0],
  );
}

/// [LogEntry] entity fields to define ObjectBox queries.
class LogEntry_ {
  /// See [LogEntry.id].
  static final id = obx.QueryIntegerProperty<LogEntry>(
    _entities[7].properties[0],
  );

  /// See [LogEntry.timestamp].
  static final timestamp = obx.QueryStringProperty<LogEntry>(
    _entities[7].properties[1],
  );

  /// See [LogEntry.eventType].
  static final eventType = obx.QueryStringProperty<LogEntry>(
    _entities[7].properties[2],
  );

  /// See [LogEntry.message].
  static final message = obx.QueryStringProperty<LogEntry>(
    _entities[7].properties[3],
  );
}
